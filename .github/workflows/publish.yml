name: Publish

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to simulate'
        required: true

jobs:
  version:
    timeout-minutes: 15
    runs-on: self-hosted
    permissions:
      contents: write
      packages: write
      pull-requests: write
    env:
      IMAGE_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
    outputs:
      image-version: ${{ steps.set_outputs.outputs.image_version }}
    steps:
      - id: set_outputs
        run: |
          echo "::set-output name=image_version::${IMAGE_VERSION}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build libraries
        run: pnpm ci:build

      - name: Set up npm auth for Nexus (basic auth)
        run: |
          echo "@mixin-ui:registry=https://repo.coreteq.cloud/repository/libs-release-npm/" >> ~/.npmrc
          echo "//repo.coreteq.cloud/repository/libs-release-npm/:_auth=$(echo -n '${{ secrets.NPM_USERNAME }}:${{ secrets.NPM_PASSWORD }}' | base64)" >> ~/.npmrc
          echo "//repo.coreteq.cloud/repository/libs-release-npm/:email=${{ secrets.NPM_EMAIL }}" >> ~/.npmrc
          echo "//repo.coreteq.cloud/repository/libs-release-npm/:always-auth=true" >> ~/.npmrc

      - name: Publish packages
        run: pnpm ci:publish
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_ADDRESS }}
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: true
          secrets: |
              secrets/data/prod/mixin-ui/mixin-ui-server-key id_ed | SSH_PRIVATE_KEY ;
              secrets/data/prod/mixin-ui/docker_registry docker_registry | DOCKER_REGISTRY ;
              secrets/data/prod/mixin-ui/docker_username docker_username | DOCKER_USERNAME ;
              secrets/data/prod/mixin-ui/docker_password docker_password | DOCKER_PASSWORD

      - name: Load SSH key for private repos
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Debug image version
        run: echo ${IMAGE_VERSION}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          ssh: default
          tags: |
            ${{ env.DOCKER_REGISTRY }}/mixin-ui-server:latest

  argo_sync:
      name: Sync Argo CD & Notify
      needs: version
      runs-on: self-hosted
      env:
        APP_NAME: prod-mixin-ui
        RESOURCE_NAME: mixin-ui-server
      steps:
        - name: Import ArgoCD Secrets
          uses: hashicorp/vault-action@v2.4.0
          with:
            url: ${{ secrets.VAULT_ADDRESS }}
            token: ${{ secrets.VAULT_TOKEN }}
            tlsSkipVerify: true
            secrets: |
                secrets/data/prod/mixin-ui/docker_registry docker_registry | DOCKER_REGISTRY ;
                secrets/data/prod/mixin-ui/argocd server | ARGOCD_SERVER ;
                secrets/data/prod/mixin-ui/argocd token | ARGOCD_AUTH_TOKEN

        - name: Install Argo CD CLI
          run: |
            curl -sSL -o argocd \
              https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd && sudo mv argocd /usr/local/bin/

        - name: Restart Deployment via Argo CD
          run: |
            argocd \
              --server $ARGOCD_SERVER \
              --insecure \
              --auth-token $ARGOCD_AUTH_TOKEN \
              --grpc-web \
              app actions run $APP_NAME restart --kind Deployment --resource-name $RESOURCE_NAME
        
        - name: Wait for rollout
          run: |
            argocd \
              --server $ARGOCD_SERVER \
              --insecure \
              --auth-token $ARGOCD_AUTH_TOKEN \
              --grpc-web \
              app wait $APP_NAME --health --timeout 120
        
        - name: Send email notification
          uses: dawidd6/action-send-mail@v3
          with:
            server_address: smtp.office365.com
            server_port: 587
            username: ${{ secrets.SMTP_USERNAME }}
            password: ${{ secrets.SMTP_PASSWORD }}
            subject: "ðŸš€ Mixin UI ${{ env.IMAGE_VERSION }} deployed"
            to: fe-devs@coreteq.sk
            from: Mixin UI Bot <${{ secrets.SMTP_USERNAME }}>
            secure: false
            body: |
              Hello team,

              Weâ€™re excited to announce that a new version of Mixin UI has just been released and published to our private registry.

              ðŸ”– Version:${{ env.IMAGE_VERSION }}
              ðŸ“¦ Repository: ${{ github.repository }}
              ðŸ”— Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

              ðŸ“˜ Release Notes:
              https://github.com/CORETEQ/mixin-ui/releases/tag/${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}

              ðŸ§© Documentation:
              https://mixin.coreteq.cloud

              Please pull the latest changes and try it out. Let us know if you notice anything unusual.

              â€” Mixin UI Bot
