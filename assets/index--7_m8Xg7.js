import{ɵ as k,D as d,a as h,b as F,c as n,d as i,e,f as t,g as l,h as p}from"./index-CjNzUg7D.js";const E=`<pre class="shiki shiki-themes github-light github-dark-default" style="background-color:#fff;--shiki-dark-bg:#0d1117;color:#24292e;--shiki-dark:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">export</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> { XTheme } </span><span style="color:#D73A49;--shiki-dark:#FF7B72">from</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> '@mixin-ui/kit'</span><span style="color:#24292E;--shiki-dark:#E6EDF3">;</span></span></code></pre>`,y=`<pre class="shiki shiki-themes github-light github-dark-default" style="background-color:#fff;--shiki-dark-bg:#0d1117;color:#24292e;--shiki-dark:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">@</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF">Component</span><span style="color:#24292E;--shiki-dark:#E6EDF3">({ </span><span style="color:#D73A49;--shiki-dark:#FF7B72">...</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> })</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">export</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> class</span><span style="color:#6F42C1;--shiki-dark:#FFA657"> Usage</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">  readonly</span><span style="color:#E36209;--shiki-dark:#FFA657"> #theme</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> =</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF"> inject</span><span style="color:#24292E;--shiki-dark:#E6EDF3">(XTheme);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#D2A8FF">  set</span><span style="color:#24292E;--shiki-dark:#E6EDF3">(</span><span style="color:#E36209;--shiki-dark:#FFA657">theme</span><span style="color:#D73A49;--shiki-dark:#FF7B72">:</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> 'dark'</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> |</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> 'light'</span><span style="color:#24292E;--shiki-dark:#E6EDF3">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79C0FF">    this</span><span style="color:#24292E;--shiki-dark:#E6EDF3">.#theme.</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF">set</span><span style="color:#24292E;--shiki-dark:#E6EDF3">(theme);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">}</span></span></code></pre>`,s=class s{constructor(){this.imp=E,this.usage=y}};s.ɵfac=function(a){return new(a||s)},s.ɵcmp=k({type:s,selectors:[["app-theme"]],decls:9,vars:2,consts:[[3,"src"]],template:function(a,o){a&1&&(n(0,"docs-page")(1,"p"),i(2," A service that enables dynamic switching between light and dark themes in the application. It provides methods to toggle themes, get current theme state, and automatically persists user preferences. "),e(),n(3,"h2"),i(4,"Import"),e(),t(5,"docs-code",0),n(6,"h2"),i(7,"Usage"),e(),t(8,"docs-code",0),e()),a&2&&(l(5),p("src",o.imp),l(3),p("src",o.usage))},dependencies:[d,h,F],encapsulation:2,changeDetection:0});let r=s;export{r as default};
