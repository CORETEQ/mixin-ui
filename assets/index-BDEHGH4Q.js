import{ɵ as k,D as d,a as F,b as h,c as a,d as s,e as n,f as i,g as t,h as o}from"./index-B-9NmBiM.js";const E=`<pre class="shiki shiki-themes github-light github-dark-default" style="background-color:#fff;--shiki-dark-bg:#0d1117;color:#24292e;--shiki-dark:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">import</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  XTypedOutletPipe,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  XOutlet </span><span style="color:#6A737D;--shiki-dark:#8B949E">// optional</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">} </span><span style="color:#D73A49;--shiki-dark:#FF7B72">from</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> '@mixin-ui/cdk'</span><span style="color:#24292E;--shiki-dark:#E6EDF3">;</span></span></code></pre>`,y=`<pre class="shiki shiki-themes github-light github-dark-default" style="background-color:#fff;--shiki-dark-bg:#0d1117;color:#24292e;--shiki-dark:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">@</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF">Component</span><span style="color:#24292E;--shiki-dark:#E6EDF3">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  template: </span><span style="color:#032F62;--shiki-dark:#A5D6FF">\`</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">    @let</span><span style="color:#24292E;--shiki-dark:#FFA657"> c</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> = </span><span style="color:#6F42C1;--shiki-dark:#D2A8FF">content</span><span style="color:#24292E;--shiki-dark:#FFA657">() </span><span style="color:#D73A49;--shiki-dark:#FF7B72">|</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF"> typedOutlet</span><span style="color:#24292E;--shiki-dark:#FFA657">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">    @if</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> (c.type </span><span style="color:#D73A49;--shiki-dark:#FF7B72">===</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> 'component'</span><span style="color:#24292E;--shiki-dark:#E6EDF3">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">      &#x3C;</span><span style="color:#22863A;--shiki-dark:#7EE787">ng-container</span><span style="color:#6F42C1;--shiki-dark:#79C0FF"> *ngComponentOutlet</span><span style="color:#24292E;--shiki-dark:#E6EDF3">=</span><span style="color:#032F62;--shiki-dark:#A5D6FF">"c.outlet"</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> /></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">    } </span><span style="color:#D73A49;--shiki-dark:#FF7B72">@else if</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> (c.type </span><span style="color:#D73A49;--shiki-dark:#FF7B72">===</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> 'template'</span><span style="color:#24292E;--shiki-dark:#E6EDF3">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">      &#x3C;</span><span style="color:#22863A;--shiki-dark:#7EE787">ng-container</span><span style="color:#6F42C1;--shiki-dark:#79C0FF"> *ngTemplateOutlet</span><span style="color:#24292E;--shiki-dark:#E6EDF3">=</span><span style="color:#032F62;--shiki-dark:#A5D6FF">"c.outlet"</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> /></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">    } </span><span style="color:#D73A49;--shiki-dark:#FF7B72">@else</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">      {{ c.outlet }}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">    }</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#A5D6FF">  \`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">})</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">export</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> class</span><span style="color:#6F42C1;--shiki-dark:#FFA657"> Usage</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#8B949E">  /**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#8B949E">   * XOutlet = Type | TemplateRef | string | null | undefined;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#8B949E">   */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">  readonly</span><span style="color:#E36209;--shiki-dark:#FFA657"> content</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> =</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF"> input</span><span style="color:#24292E;--shiki-dark:#E6EDF3">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#FFA657">XOutlet</span><span style="color:#24292E;--shiki-dark:#E6EDF3">>();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">}</span></span></code></pre>`,e=class e{constructor(){this.imp=E,this.usage=y}};e.ɵfac=function(l){return new(l||e)},e.ɵcmp=k({type:e,selectors:[["app-typed-outlet"]],decls:22,vars:2,consts:[[3,"src"],["href","https://angular.dev/api/common/NgComponentOutlet","target","_blank"],["href","https://angular.io/api/common/NgTemplateOutlet","target","_blank"]],template:function(l,p){l&1&&(a(0,"docs-page")(1,"p"),s(2," Transforms a union type representing dynamic content into a discriminated structure that enables precise rendering via Angular’s built-in structural directives — directly in the template. "),n(),a(3,"h2"),s(4,"Import"),n(),i(5,"docs-code",0),a(6,"h2"),s(7,"Usage"),n(),i(8,"docs-code",0),a(9,"h2"),s(10,"Purpose"),n(),a(11,"p"),s(12," Use "),a(13,"code"),s(14,"typedOutlet"),n(),s(15," when your input may be a component type (Type), a template (TemplateRef), a string, or null/undefined, and you want to narrow its type within the template to render it using "),a(16,"a",1),s(17,"*ngComponentOutlet"),n(),s(18,", "),a(19,"a",2),s(20,"*ngTemplateOutlet"),n(),s(21,", or text interpolation accordingly. "),n()()),l&2&&(t(5),o("src",p.imp),t(3),o("src",p.usage))},dependencies:[d,F,h],encapsulation:2,changeDetection:0});let r=e;export{r as default};
