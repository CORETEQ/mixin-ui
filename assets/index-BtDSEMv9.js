import{K as F,V as E,O as u,W as y,ɵ as h,ad as m,Z as D,R as f,a1 as g,N as C,L as A,c as a,f as e,e as n,h as l,g as c,D as b,a as x,v,b as _,w,x as B,d as p}from"./index-D4DTjVS4.js";const I=`<pre class="shiki shiki-themes github-light github-dark-default" style="background-color:#fff;--shiki-dark-bg:#0d1117;color:#24292e;--shiki-dark:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">import</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  XInputMask,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  XControl</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">} </span><span style="color:#D73A49;--shiki-dark:#FF7B72">from</span><span style="color:#032F62;--shiki-dark:#A5D6FF"> '@mixin-ui/kit'</span><span style="color:#24292E;--shiki-dark:#E6EDF3">;</span></span></code></pre>`,T=`<pre class="shiki shiki-themes github-light github-dark-default" style="background-color:#fff;--shiki-dark-bg:#0d1117;color:#24292e;--shiki-dark:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">@</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF">Component</span><span style="color:#24292E;--shiki-dark:#E6EDF3">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">  template: </span><span style="color:#032F62;--shiki-dark:#A5D6FF">\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">    &#x3C;</span><span style="color:#22863A;--shiki-dark:#7EE787">x-input-mask</span><span style="color:#6F42C1;--shiki-dark:#79C0FF"> pattern</span><span style="color:#24292E;--shiki-dark:#E6EDF3">=</span><span style="color:#032F62;--shiki-dark:#A5D6FF">"+{421} 000 000 000"</span><span style="color:#24292E;--shiki-dark:#E6EDF3">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">      &#x3C;</span><span style="color:#22863A;--shiki-dark:#7EE787">input</span><span style="color:#6F42C1;--shiki-dark:#79C0FF"> x-control</span><span style="color:#6F42C1;--shiki-dark:#79C0FF"> [(ngModel)]</span><span style="color:#24292E;--shiki-dark:#E6EDF3">=</span><span style="color:#032F62;--shiki-dark:#A5D6FF">"value"</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> /></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">    &#x3C;/</span><span style="color:#22863A;--shiki-dark:#7EE787">x-input-mask</span><span style="color:#24292E;--shiki-dark:#E6EDF3">></span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#A5D6FF">  \`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">})</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">export</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> class</span><span style="color:#6F42C1;--shiki-dark:#FFA657"> Usage</span><span style="color:#24292E;--shiki-dark:#E6EDF3"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF7B72">  readonly</span><span style="color:#E36209;--shiki-dark:#FFA657"> value</span><span style="color:#D73A49;--shiki-dark:#FF7B72"> =</span><span style="color:#6F42C1;--shiki-dark:#D2A8FF"> signal</span><span style="color:#24292E;--shiki-dark:#E6EDF3">(</span><span style="color:#032F62;--shiki-dark:#A5D6FF">''</span><span style="color:#24292E;--shiki-dark:#E6EDF3">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6EDF3">}</span></span></code></pre>`,t=class t{constructor(){this.control=new F("",{nonNullable:!0,validators:[E.required]}),this.pattern=u("+{421} 000 000 000"),this.control.events.pipe(y()).subscribe(console.log)}};t.ɵfac=function(s){return new(s||t)},t.ɵcmp=h({type:t,selectors:[["app-input-mask-basic-example"]],decls:2,vars:2,consts:[[3,"pattern"],["x-control","","placeholder","Type here",3,"formControl"]],template:function(s,i){s&1&&(a(0,"x-input-mask",0),e(1,"input",1),n()),s&2&&(l("pattern",i.pattern()),c(),l("formControl",i.control))},dependencies:[m,D,f,g,C,A],encapsulation:2});let d=t;const o=class o{constructor(){this.imp=I,this.usage=T}};o.ɵfac=function(s){return new(s||o)},o.ɵcmp=h({type:o,selectors:[["app-input-mask"]],decls:24,vars:2,consts:[[1,"docs-separator"],["withHeader",""],[1,"block","w-[274px]"],[3,"src"],["name","variant","type","enum","default","outline"],["name","size","type","enum","default","md"],["name","radius","type","enum","default","md"],["name","pattern","type","string"],["name","showFiller","type","boolean","default","true"],["name","fillerChar","type","string","default","_"],["name","strict","type","boolean","default","true"]],template:function(s,i){s&1&&(a(0,"docs-page")(1,"p"),p(2,"Used to enter input in a certain format such as numeric, date, currency and phone."),n(),e(3,"div",0),a(4,"docs-snippet",1),e(5,"app-input-mask-basic-example",2),n(),a(6,"h2"),p(7,"Import"),n(),e(8,"docs-code",3),a(9,"h2"),p(10,"Usage"),n(),e(11,"docs-code",3),a(12,"h2"),p(13,"API"),n(),a(14,"h3"),p(15,"Inputs"),n(),a(16,"docs-api-table"),e(17,"docs-input",4)(18,"docs-input",5)(19,"docs-input",6)(20,"docs-input",7)(21,"docs-input",8)(22,"docs-input",9)(23,"docs-input",10),n()()),s&2&&(c(8),l("src",i.imp),c(3),l("src",i.usage))},dependencies:[b,x,v,_,w,B,d],encapsulation:2,changeDetection:0});let k=o;export{k as default};
